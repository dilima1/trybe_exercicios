let separador = ("-------------------------------------------------------------------------------------------------------")
console.log(separador);
console.log(`PARTE 1`);
console.log(separador);
//  Agora voc√™ vai fazer alguns exerc√≠cios de fixa√ß√£o - PARTE I

//     üöÄ Se liga nesse foguete!
//     Os exerc√≠cios destacados com üöÄ s√£o os fundamentais pra voc√™ ir bem no projeto! Todos os exerc√≠cios v√£o contribuir com sua forma√ß√£o mas fique de olho nesses! üëÄ

//     üöÄ Fa√ßa as modifica√ß√µes necess√°rias na fun√ß√£o para que o seu comportamento respeite o escopo no qual cada vari√°vel foi declarada.

//     Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function.
//     Modifique as concatena√ß√µes para template literals. 
 const testingScope = (escopo) => {
        if (escopo === true) {
          let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
          ifScope = `1 - ${ifScope} √≥timo, fui utilizada no escopo!`;
          console.log(ifScope);
        } else {
          let elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
          elseScope = `1 - ${elseScope} otimo, fui utilizada no escopo!`
          console.log(elseScope);
        }
      }
      testingScope(false);

console.log(separador);

    //   2.üöÄ Copie o c√≥digo abaixo e fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente.

    // Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".

    // B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todoarray.sort(). 
    // Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.
    // Copie o c√≥digo abaixo.

     const oddsAndEvens = [13, 3, 4, 10, 7, 2];

      // Seu c√≥digo aqui.
      function compararNumeros(a, b) {
        return a - b;
      }
      let numberOrder = oddsAndEvens.sort(compararNumeros)
      console.log(`2 - Os numeros ${numberOrder} se encontram ordenados de forma crescente!`); // ser√° necess√°rio alterar essa linha üòâ

console.log(separador);
console.log(`PARTE 2`);
console.log(separador);

//  Parte II
// Abaixo, voc√™ ver√° algumas especifica√ß√µes de algoritmos para desenvolver. √â fundamental que voc√™ utilize o que aprendeu sobre let, const, arrow functions, template literals e ternary operator.

//     1. Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.

//     Na matem√°tica, o fatorial de um n√∫mero n√£o negativo N, com a nota√ß√£o N!, √© o produto de todos os inteiros menores ou iguais a N. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
//     B√¥nus (opcional): tente fazer o mesmo exerc√≠cio de forma recursiva. Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator.
let num = 5;
const factorial = (n) => {return (n == 1 || n == 0) ? 1 : n * factorial(n - 1);}

console.log(`1 - Fatorial de ${num} √© ${factorial(num)}.`);
console.log(separador);

//     2. Crie uma fun√ß√£o que receba uma frase e retorne qual a maior palavra.

//     Exemplo:

//       

let longestWord = ('Ant√¥nio foi no banheiro e n√£o sabemos o que aconteceu').split(" ");
let palavraMaior = longestWord[0]

const letterBig = () => {
for (index = 0; index < longestWord.length; index += 1) {
  if (longestWord[index].length > palavraMaior.length) {
    palavraMaior = longestWord[index];
  }
}
return `2 - ${palavraMaior}`;
}
console.log(letterBig());

console.log(separador);

//     3. üöÄ Crie uma p√°gina que contenha:

//     Um bot√£o ao qual ser√° associado um event listener;
//     Uma vari√°vel clickCount no arquivo JavaScript que acumule o n√∫mero de clicks no bot√£o;
//     Um campo no HTML que v√° atualizando a quantidade de clicks no bot√£o conforme a vari√°vel clickCount √© atualizada.
const button = document.getElementById('button');

const adicionarClique = () => {
const localClique = document.querySelector('#receberClique')
let campClick = Number(document.getElementById('receberClique').valueOf().innerHTML)
let = clickCount = 1
localClique.innerHTML = campClick += clickCount 

}

button.addEventListener('click', adicionarClique)

//     4. üöÄ Crie um c√≥digo JavaScript com a seguinte especifica√ß√£o:

// N√£o se esque√ßa de usar template literals

//     Fun√ß√£o 1: Escreva uma fun√ß√£o que vai receber uma string como par√¢metro. Sua fun√ß√£o dever√° procurar pela letra x em uma string qualquer que voc√™ determinar e substituir pela string que voc√™ passou como par√¢metro. Sua fun√ß√£o deve retornar essa nova string.
//     Exemplo:
//         String determinada: "Tryber x aqui!"
//         Par√¢metro: "Bebeto"
//         Retorno: "Tryber Bebeto aqui!"
let skills = ['HTML', 'CSS', 'GIT', 'Esfor√ßado', 'Determinado'];
skillsOrdem = skills.sort()
let name1 = "Edilson"
const func1 = (name) => {
  return `Tryber ${name} aqui!`
}
let funcao1 = func1(name1)

//     Um array com escopo global, que √© o escopo do arquivo JS, nesse caso, contendo cinco strings com suas principais skills.


//     Fun√ß√£o 2: Escreva uma fun√ß√£o que vai receber a string retornada da Fun√ß√£o 1 como par√¢metro. Essa fun√ß√£o deve concatenar as skills do array global √† string que foi passada para a Fun√ß√£o 2 via par√¢metro. Voc√™ deve ordenar os skills em ordem alfab√©tica. Sua fun√ß√£o deve retornar essa nova string.

const func2 = () => {
  
  return `${funcao1} 
  Minhas cinco principais habilidades s√£o:
  ${skillsOrdem[0]};
  ${skills[1]};
  ${skills[2]};
  ${skills[3]};
  ${skills[4]}`

}

console.log(func2());

//     Exemplo:
//     "Tryber x aqui!
//     Minhas cinco principais habilidades s√£o:
//         JavaScript;
//         HTML; ...
//     #goTrybe".



