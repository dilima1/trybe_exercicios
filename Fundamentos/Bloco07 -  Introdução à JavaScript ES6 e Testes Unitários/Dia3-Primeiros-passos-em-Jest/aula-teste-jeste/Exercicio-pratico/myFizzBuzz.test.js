const myFizzBuzz = require('./myFizzBuzz')

//  ðŸš€ 3 - A funÃ§Ã£o myFizzBuzz(num) recebe um nÃºmero num e retorna "fizzbuzz" se o nÃºmero for divisÃ­vel por 3 e 5, retorna "fizz" se for divisÃ­vel apenas por 3, retorna "buzz" se divisÃ­vel apenas por 5, retorna o prÃ³prio nÃºmero caso nÃ£o seja divisÃ­vel por 3 ou 5 e retorna false caso num nÃ£o seja um nÃºmero

//     3.1 - FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 3 e 5 e verifique se o retorno Ã© o esperado
//     3.2 - FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 3 e verifique se o retorno Ã© o esperado
//     3.3 - FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 5 e verifique se o retorno Ã© o esperado
//     3.4 - FaÃ§a uma chamada com um nÃºmero que nÃ£o Ã© divisÃ­vel por 3 ou 5 e verifique se o retorno Ã© o esperado
//     3.5 - FaÃ§a uma chamada com um parÃ¢metro que nÃ£o Ã© um nÃºmero e verifique se o retorno Ã© o esperado

describe('3 - Test Function myFizzBuzz', () => {
  
  it('3.1 - Se NUM for divisivel por 3 e 5 entÃ£o deverÃ¡ retornar FIZZBUZZ.', () => {
    expect(myFizzBuzz(15)).toBe('fizzbuzz')
  });

  it('3.2 - Se NUM for divisivel por 3 entÃ£o deverÃ¡ retornar FIZZ.', () => {
    expect(myFizzBuzz(9)).toBe('fizz')
  });

  it('3.3 - Se NUM for divisivel por 5 entÃ£o deverÃ¡ retornar BUZZ.', () => {
    expect(myFizzBuzz(10)).toBe('buzz')
  });

  it('3.4 - Se NUM nÃ£o for divisivel por 3 e nem  por 5 entÃ£o deverÃ¡ retornar ele mesmo.', () => {
    expect(myFizzBuzz(7)).toBe(7)
  });

  it('3.5 - Se NUM nÃ£o for um numero, retorne false.', () => {
    expect(myFizzBuzz("a")).toBe(false)
  });




});
