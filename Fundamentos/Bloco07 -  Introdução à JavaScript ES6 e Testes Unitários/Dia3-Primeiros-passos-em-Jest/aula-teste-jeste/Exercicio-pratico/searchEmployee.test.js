const searchEmployee = require('./searchEmployee');

//  B√¥nus
// üöÄ 1 - Voc√™ est√° pronto para um desafio?! Neste exerc√≠cio, voc√™ ir√° praticar o desenvolvimento orientado a testes implementando:

//     A fun√ß√£o;
//     Os testes para essa fun√ß√£o;

// Considere os dados abaixo. Voc√™ deve criar uma fun√ß√£o que receba dois par√¢metros: o id do funcion√°rio e a informa√ß√£o dispon√≠vel sobre ele (firstName, lastName, specialities). Voc√™ tamb√©m dever√° criar os testes para essa fun√ß√£o. Sua fun√ß√£o dever√° ent√£o retornar os resultados da busca pelo id para aquele funcion√°rio e a informa√ß√£o consultada. Caso o id n√£o conste no quadro de funcion√°rios, sua fun√ß√£o deve retornar o erro "ID n√£o identificada". Se a informa√ß√£o que se quer acessar n√£o existir, a fun√ß√£o deve retornar o erro "Informa√ß√£o indispon√≠vel".

// Gabarito
// describe('The function SearchEmployee', () => {
//   it('Verificar se a fun√ß√£o SearchEmployee existe', () => {
//     expect(typeof searchEmployee).toBe('function');
//   });
//     describe('1 - Verificar requisitos do ID: 8579-6.', () => {
//       it('1.1 - Verifica se o FirstName retorna Ana', () => {
//         expect(searchEmployee('8579-6', 'firstName')).toBe('O ID: 8579-6, possui o firstName: Ana.');
//       });
//       it('1.2 - Verifica se o LastName retorna Gates', () => {
//         expect(searchEmployee('8579-6', 'lastName')).toBe('O ID: 8579-6, possui o lastName: Gates.');
//       });
      
//     });

// });

// describe('Testa a fun√ß√£o searchEmployee', () => {
//   it('Testa se searchEmployee √© uma fun√ß√£o', () => {
//     expect(typeof searchEmployee).toBe('function');
//   });
//   it('Testa se searchEmployee(id, "firstName") retorna o primeiro nome do usu√°rio da id consultada', () => {
//     const actual = searchEmployee('1256-4', 'firstName');
//     const expected = 'Linda';

//     expect(actual).toBe(expected);
//   });
//   it('Testa se searchEmployee(id, "lastName") retorna o segundo nome do usu√°rio da id consultada', () => {
//     const actual = searchEmployee('1256-4', 'lastName');
//     const expected = 'Bezos';

//     expect(actual).toBe(expected);
//   });
//   it('Testa se searchEmployee(id, "specialities") retorna um array com todas as habilidades do id pesquisado', () => {
//     const actual = searchEmployee('1256-4', 'specialities');
//     expect(actual).toContain('Hooks', 'Context API', 'Tailwind CSS');
//   });
//   it('Testa se um erro com a mensagem "ID n√£o identificada" √© retornado quando a ID n√£o existir', () => {
//     expect(() => { searchEmployee('1256-8', 'specialities') }).toThrow();
//   });
//   it('Testa a mensagem do erro para ID inexistente', () => {
//     expect(() => { searchEmployee('1256-8', 'specialities') }).toThrowError(new Error("ID n√£o identificada"));
//   });
//   it('Testa se lan√ßa um erro quando a informa√ß√£o e o ID s√£o inexistentes', () => {
//     expect(() => { searchEmployee() }).toThrow();
//   });
//   it('Testa a mensagem do erro para informa√ß√£o inexistente', () => {
//     expect(() => { searchEmployee('4678-2', 'shift') }).toThrowError(new Error("Informa√ß√£o indispon√≠vel"));
//   });
// });