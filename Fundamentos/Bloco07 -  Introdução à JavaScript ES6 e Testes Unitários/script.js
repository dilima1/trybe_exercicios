//  Agora voc√™ vai fazer alguns exerc√≠cios de fixa√ß√£o.

//     üöÄ Se liga nesse foguete!
//     Os exerc√≠cios destacados com üöÄ s√£o os fundamentais pra voc√™ ir bem no projeto! Todos os exerc√≠cios v√£o contribuir com sua forma√ß√£o mas fique de olho nesses! üëÄ

//     üöÄ Fa√ßa as modifica√ß√µes necess√°rias na fun√ß√£o para que o seu comportamento respeite o escopo no qual cada vari√°vel foi declarada.

//     Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function.
//     Modifique as concatena√ß√µes para template literals. 
 const testingScope = (escopo) => {
        if (escopo === true) {
          let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
          ifScope = `${ifScope} √≥timo, fui utilizada no escopo!`;
          console.log(ifScope);
        } else {
          let elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
          elseScope = `${elseScope} otimo, fui utilizada no escopo!`
          console.log(elseScope);
        }
      }
      testingScope(false);

    //   2.üöÄ Copie o c√≥digo abaixo e fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente.

    // Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".

    // B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todoarray.sort(). 
    // Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.
    // Copie o c√≥digo abaixo.

     const oddsAndEvens = [13, 3, 4, 10, 7, 2];

      // Seu c√≥digo aqui.
      function compararNumeros(a, b) {
        return a - b;
      }
      let numberOrder = oddsAndEvens.sort(compararNumeros)
      console.log(`Os numeros ${numberOrder} se encontram ordenados de forma crescente!`); // ser√° necess√°rio alterar essa linha üòâ


