1 - mkdir app-with-sequelize && cd app-with-sequelize
2 - npm init -y
3 - npm install sequelize
4 - npm install -D sequelize-cli
5 - npm install mysql2
6 - mkdir src
7 - npm install -D sequelize-cli
8 - npm install mysql2
9 - mkdir src
10 - cd src
11 - npx sequelize-cli init
    Esse comando vai criar as seguintes pastas:
    config: contém um arquivo de configuração, com orientações para o CLI se conectar com o nosso banco de dados;
    models: contém todos os modelos da nossa aplicação;
    migrations: contém todos os arquivos de migração da nossa aplicação;
    seeders: contém todos os arquivos de “seeds” (sementes que são usadas para popular o banco).


 3️⃣ Conexão com o banco de dados

➡️ Agora precisamos configurar o arquivo config.json gerado pelo init do CLI. Ao alterar esse arquivo, estamos configurando o acesso da aplicação ao nosso banco de dados.

➡️ Note que no nosso arquivo config.json, dentro da pasta config, as informações sensíveis, como credenciais de acesso ao banco de dados, estão todas expostas no nosso código. Uma boa prática é usar variáveis de ambiente para controlar o que estiver relacionado à configuração geral da aplicação. Então, bora fazer isso do jeito certo!

➡️ Vamos fazer a instalação do pacote dotenv:

12 - npm install dotenv

Mudaremos o nome do nosso arquivo config.json para config.js

➡️ Retiraremos todo o conteúdo de config.js e substituiremos pelo código abaixo:


    require('dotenv').config();

    const config = {
      username: process.env.MYSQL_USER,
      password: process.env.MYSQL_PASSWORD,
      database: process.env.MYSQL_DATABASE,
      host: process.env.MYSQL_HOST,
      dialect: 'mysql',
    };

    module.exports = {
      development: config,
      test: config,
      production: config,
    };

Note que vamos assumir que os três ambientes vão utilizar configurações semelhantes. Em aplicações mais complexas, no entanto, é possível que você utilize bancos de dados e configurações diferentes para cada ambiente. Nesses casos, elas devem ser configuradas por meio de variáveis de ambiente.

➡️ Vamos entender melhor as informações que estamos passando:

    Usuário de acesso ao banco de dados;
    Senha de acesso ao banco de dados;
    Nome do banco de dados no qual queremos conectar;
    Host que estamos conectando - por ser local, utilizamos o 127.0.0.1;
    Dialect, que se refere a qual banco estamos utilizando. Nesse caso, “mysql”.

Crie o arquivo .env na raiz do projeto e preencha as variáveis com as suas credenciais para acessar o MySQL:

  MYSQL_USER=root
  MYSQL_PASSWORD=senha_mysql
  MYSQL_DATABASE=orm_example
  MYSQL_HOST=localhost

➡️ Modifique a linha 9 do arquivo src/models/index.js para apontar para o arquivo config.js:

const config = require(__dirname + '/../config/config.json')[env]; // configuração antiga
const config = require(__dirname + '/../config/config.js')[env];   // configuração nova

➡️ Antes de rodar os comandos Sequelize, precisamos garantir que temos uma instância do MySQL rodando.

Caso você já tenha um container com uma imagem do MySQL, pode utilizá-lo ou usar o comando abaixo no terminal para criar e rodar um:

    ⚠️ Garanta que a senha do banco esteja de acordo com a presente no .env. 😉

docker container run --name container-mysql -e MYSQL_ROOT_PASSWORD=senha_mysql -d -p 3306:3306 mysql:8.0.29

    Se você tiver o MySQL instalado em sua máquina, inicie ele com sudo service mysql start (Linux) ou brew services start mysql (MacOS).

4️⃣ O arquivo .sequelizerc

Por padrão, ao rodar um comando Sequelize os arquivos dentro das pastas de migrations, models, seeders e config seriam procurados somente na camada em que estivéssemos executando o comando. No nosso caso, como estamos utilizando a pasta src para abrigar os arquivos do Sequelize, caso executássemos um comando diretamente na raiz da aplicação, iríamos no deparar com um erro.

Podemos entrar na pasta src e executar estes comandos, como fizemos anteriormente, pois assim teremos êxito. Mas caso fosse uma aplicação maior, com mais camadas, aumentaríamos a complexidade de subir e configurar a aplicação.

É neste momento que entra em cena o arquivo .sequelizerc. Ele é um arquivo de configuração que podemos utilizar caso seja preciso substituir o caminho padrão das pastas migrations, models, seeders ou config. Dessa forma, podemos construir um código com uma arquitetura mais organizada. ⭐

➡️ Para configurar este arquivo, crie um arquivo com o nome .sequelizerc na raiz da aplicação com o seguinte conteúdo:

const path = require('path');

module.exports = {
  'config': path.resolve('src', 'config', 'config.js'),
  'models-path': path.resolve('src', 'models'),
  'seeders-path': path.resolve('src', 'seeders'),
  'migrations-path': path.resolve('src', 'migrations'),
};

Vamos entender melhor as informações deste arquivo:

    path: é um módulo interno do Node que nos fornece alguns utilitários para trabalharmos com caminhos de arquivos e diretórios;
    config: é um caminho para o arquivo de configuração;
    models-path: é um caminho para o diretório de models;
    seeders-path: é um caminho para o diretório de seeders;
    migrations-path: é um caminho para o diretório de migrations.

5️⃣ Criação do banco de dados usando o CLI do Sequelize

➡️ Agora que iniciamos uma aplicação do Sequelize e nosso banco de dados está rodando, podemos criar o banco de dados orm_example (que nomeamos no .env) por meio deste comando:

npx sequelize db:create

No seu terminal, o Sequelize vai avisar que o database foi criado. Você pode verificar isso no próprio MySQL utilizando os comandos abaixo:

mysql -u root -p

➡️ Digite a sua senha de acesso ao mysql e em seguida rode o comando abaixo:

show databases;

➡️ Perceba que, a partir desses passos, o banco orm_example foi criado e você não precisou escrever nenhuma linha de SQL para isso. Essa é uma das primeiras vantagens que o Sequelize nos oferece. ⭐

Criar migrations

  --> npx sequelize migration:generate --name create-user

Criar seeders

  --> npx sequelize seed:generate --name users
  --> npx sequelize db:seed:all

Para reverter o seed, use o seguinte comando:

  --> npx sequelize db:seed:undo:all


